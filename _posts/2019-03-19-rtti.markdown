---
date: '2019-03-18 20:58:18 +0300'
layout: post
categories: jekyll update
---

Динамическая идентификация типа данных
======================================

(Run Time Type Information - RTTI).
-----------------------------------

**RTTI – механизм получения и использования информации о типе объекта на этапе
выполнения программы**, позволяет:

-   определить тип объекта во время выполнения программы;

-   проверить, является ли некоторый объект объектом заданного типа;

-   сравнить типы двух данных объектов.

В объектно-ориентированных языках (С++) возникают ситуации, когда тип объекта
при компиляции неизвестен – указатель базового класса используется и как
указатель на объект базового класса, и как указатель на объект  производного от
него (полиморфизм).

 

Приведения типов между классами обычно называют:

![Виды приведения типов](https://cloud.mail.ru/public/Bf2S/2P6vV7edp/1.PNG)

Работа происходит не с самими объектами, а с указателями (ссылками) на них.
Поэтому операция приведения к ожидаемому типу (если оно выполнимо) на этапе
выполнения программы очень полезна. Для этого предназначена операция -
 [dynamic_cast](#_dynamic_cast_–_безопасное), который непосредственно относится
к RTTI.  

Наиболее распространённые реализации механизма RTTI: таблица указателей на
объекты (С++) и хранение информации об объекте в памяти вместе с ним. Т.о.
определение типа сводится к поиску в таблице или просмотру дополнительной
информации.

Требование полиморфности к dynamic_cast облегчает поиск необходимой информации о
типе объекта: специальный объект с информацией о типе (type_info) прикрепляется
к полиморфному объекту посредством добавления указателя на этот специальный
объект к виртуальной таблице (vrtb) класса.

![Информация о типе объекта](https://cloud.mail.ru/public/2aXa/cPo4XwbAR/2.PNG)

Для использования средств точного динамического определения типов к программе
необходимо подключить файл typeinfo.h.

**Typeid ( typeinfo.h ):**

-   позволяет проверить тип выражения;

-   typeid(object) возвращает ссылку на пост. объект типа type_info, который и
    описывает тип object;

-   определены операторы сравнения  ==,   !=  с базовыми типами посредством
    typeid(built_in);

-   определена функция const char\* name(), возвращающая указатель на имя типа;

-   в случае полиморфного базового класса возвращает тип реального объекта;

-   typeid(null_ptr) - исключение std::bad_typeid.

![Пример](https://cloud.mail.ru/public/4BuT/eDLd5AbE5/3.PNG)

Иногда используют безопасность dynamic_cast (возврат 0 при невозможности
приведения) для вариативного поведения кода в зависимости от типа, что лучше
реализуется через виртуальные функции.

![Пример](https://cloud.mail.ru/public/A1f5/aM1k5yfNM/4.PNG)
